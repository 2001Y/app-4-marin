import Foundation
import SwiftData
import CloudKit

@Model
final class Message {
    // „Éó„É©„Ç§„Éû„É™„Ç≠„ÉºÁõ∏ÂΩì
    // „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíÊåÅ„Åü„Åõ„Å¶ CloudKit Âà∂Á¥ÑÔºàoptional „Åæ„Åü„ÅØ defaultÔºâ„ÇíÊ∫Ä„Åü„Åô
    var id: UUID = UUID()

    // Chat room this message belongs to
    var roomID: String = ""

    // Sender identifier (my ID or remote ID)
    var senderID: String = ""

    // Message body plain text (nil for image-only message)
    var body: String?

    // Âçò‰∏ÄÁîªÂÉè„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ†¥Âêà„ÅÆ„É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´„Éë„Çπ
    var assetPath: String?

    // CloudKit record name for syncing append operations
    var ckRecordName: String?

    // Timestamp
    var createdAt: Date = Date()

    // Whether the message is already uploaded to CloudKit
    var isSent: Bool = false

    // Reaction emoji (e.g. "üëç") ‚Äì optional
    // Deprecated: reactionEmoji was removed (CloudKit normalized reactions)

    init(id: UUID = UUID(),
         roomID: String,
         senderID: String,
         body: String? = nil,
         assetPath: String? = nil,
         ckRecordName: String? = nil,
         createdAt: Date = Date(),
         isSent: Bool = false) {
        self.id = id
        self.roomID = roomID
        self.senderID = senderID
        self.body = body
        self.createdAt = createdAt
        self.isSent = isSent
        self.assetPath = assetPath
        self.ckRecordName = ckRecordName
    }
}

// MARK: - CloudKit Extensions
extension Message {
// MessageAttachment „ÅØCloudKit‰∏ä„ÅÆÂà•„É¨„Ç≥„Éº„ÉâÔºà„É≠„Éº„Ç´„É´„ÅÆSwiftData„É¢„Éá„É´„ÅØ‰∏çË¶ÅÔºâ
    static let recordType = "Message"
    
    /// Converts this Message to a CKRecord for CloudKit synchronization
    var cloudKitRecord: CKRecord {
        // ‰∏ÄË≤´„Åó„Åü„É¨„Ç≥„Éº„ÉâÂêç: UUIDÔºàid.uuidStringÔºâ„ÇíÊé°Áî®
        let recordID = CKRecord.ID(recordName: ckRecordName ?? id.uuidString)
        let record = CKRecord(recordType: Message.recordType, recordID: recordID)
        
        record["roomID"] = roomID as CKRecordValue
        record["senderID"] = senderID as CKRecordValue
        record["text"] = (body ?? "") as CKRecordValue
        record["timestamp"] = createdAt as CKRecordValue
        
        // Handle asset attachment
        if let assetPath = assetPath, FileManager.default.fileExists(atPath: assetPath) {
            let assetURL = URL(fileURLWithPath: assetPath)
            record["attachment"] = CKAsset(fileURL: assetURL)
        }
        
        return record
    }
    
    
    /// Updates this Message with data from a CKRecord (for conflict resolution)
    func update(from record: CKRecord) {
        guard record.recordType == Message.recordType else { return }

        // Align with ideal schema keys: text / attachment / timestamp
        if let text = record["text"] as? String { self.body = text }
        if let ts = record["timestamp"] as? Date { self.createdAt = ts }
        // senderID „ÅØÁêÜÊÉ≥„Çπ„Ç≠„Éº„Éû„Åß„ÅØÂøÖÈ†à„ÄÇÊ¨†Â¶ÇÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅØË°å„Çè„Å™„ÅÑ
        if let sid = record["senderID"] as? String {
            self.senderID = sid
        }
        // Reactions/isSent „ÅØCloudKit„Å∏„ÅØ‰øùÂ≠ò„Åó„Å™„ÅÑÔºàÊ≠£Ë¶èÂåñ„É¨„Ç≥„Éº„Éâ/„É≠„Éº„Ç´„É´ÁÆ°ÁêÜÔºâ

        // Update record name if needed
        if ckRecordName != record.recordID.recordName {
            ckRecordName = record.recordID.recordName
        }
        
        // Handle asset updates
        if let asset = record["attachment"] as? CKAsset,
           let fileURL = asset.fileURL {
            let localURL = AttachmentManager.makeFileURL(ext: fileURL.pathExtension)
            do {
                if !FileManager.default.fileExists(atPath: localURL.path) {
                    try FileManager.default.copyItem(at: fileURL, to: localURL)
                    assetPath = localURL.path
                }
            } catch {
                log("Failed to update asset: \(error)", category: "Message")
            }
        }
    }
    
    /// Validates if the message is ready for CloudKit sync
    var isValidForSync: Bool {
        return !roomID.isEmpty && !senderID.isEmpty && (body != nil || assetPath != nil)
    }
    
    /// Creates a conflict-free record name based on message properties
    func generateRecordName() -> String {
        if let existingName = ckRecordName { return existingName }
        // ÈÄÅÂèó‰ø°„ÅÆÈáçË§áÊéíÈô§„ÅÆ„Åü„ÇÅ„ÄÅEngine„Åå‰ΩøÁî®„Åô„Çã id.uuidString „Å®Áµ±‰∏Ä
        self.ckRecordName = id.uuidString
        return id.uuidString
    }
}

// MARK: - System Message Utilities
extension Message {
    // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÁ®ÆÈ°ûÔºöFaceTimeÁôªÈå≤
    static let sysFaceTimePrefix = "[SYS:FT_REG]"

    /// „Ç∑„Çπ„ÉÜ„É†ÊñáÔºàË°®Á§∫Áî®Ôºâ„ÇíËøî„Åô„ÄÇÂØæË±°„Åß„Å™„ÅÑÂ†¥Âêà„ÅØnil
    static func systemDisplayText(for body: String?) -> String? {
        guard let body else { return nil }
        guard body.hasPrefix(sysFaceTimePrefix) else { return nil }
        // ÂΩ¢Âºè: [SYS:FT_REG]|name=<name>|id=<faceTimeID>
        let parts = body.components(separatedBy: "|")
        var name: String? = nil
        for p in parts {
            if p.hasPrefix("name=") { name = String(p.dropFirst(5)) }
        }
        let dispName = (name?.isEmpty == false) ? name! : "Áõ∏Êâã"
        return "\(dispName)„Åï„Çì„ÅåFaceTime„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü"
    }

    /// FaceTimeÁôªÈå≤„Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏Êú¨Êñá„Çí‰ΩúÊàê
    static func makeFaceTimeRegisteredBody(name: String, faceTimeID: String) -> String {
        return "\(sysFaceTimePrefix)|name=\(name)|id=\(faceTimeID)"
    }

    /// FaceTimeÁôªÈå≤„É°„ÉÉ„Çª„Éº„Ç∏„Åã„ÇâFaceTimeID„ÇíÊäΩÂá∫
    static func extractFaceTimeID(from body: String?) -> String? {
        guard let body, body.hasPrefix(sysFaceTimePrefix) else { return nil }
        let parts = body.components(separatedBy: "|")
        for p in parts {
            if p.hasPrefix("id=") { return String(p.dropFirst(3)) }
        }
        return nil
    }
}
