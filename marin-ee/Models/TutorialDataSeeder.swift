import UIKit
import SwiftData

/// ÂàùÂõûËµ∑ÂãïÊôÇ„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÅåÁ©∫„ÅÆÂ†¥Âêà„Å´
/// „Éá„É¢Ôºè„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´Áî®„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™Âãï„ÅßÊåøÂÖ•„Åô„Çã„Éò„É´„Éë„ÄÇ
/// - ÁîªÂÉè„ÇíÂê´„ÇÄ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„É©„É≥„ÉÄ„É†„Ç´„É©„Éº„ÅÆ„Ç∑„É≥„Éó„É´„Å™„Çµ„É≥„Éó„É´ÁîªÂÉè„ÇíÂãïÁöÑÁîüÊàê„Åó„Å¶‰øùÂ≠ò„Åô„Çã„ÄÇ
struct TutorialDataSeeder {
    /// „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊåøÂÖ•„Åô„Çã„ÄÇ
    /// ÊåøÂÖ•ÂÆå‰∫ÜÂæå„ÅØ UserDefaults „ÅÆ `didSeedTutorial` „Éï„É©„Ç∞„ÇíÁ´ã„Å¶„ÄÅÈáçË§á„ÇíÈò≤„Åê„ÄÇ
    static func seed(into context: ModelContext, roomID: String, myID: String, partnerID: String) {
        let now = Date()
        let messages: [(String, String?, [URL], Date)] = [
            (partnerID, "4-Marin„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅüåä", [], now.addingTimeInterval(-300)),
            (partnerID, "Â§ßÂàá„Å™‰∫∫„Å®2‰∫∫„Å†„Åë„ÅÆÁ©∫Èñì„Åß„Åô", [], now.addingTimeInterval(-280)),
            (myID, "üòä", [], now.addingTimeInterval(-260)),
            (partnerID, "ÁîªÂÉè„ÇÇÈÄÅ„Çå„Åæ„Åôüì∏", [], now.addingTimeInterval(-240)),
            (partnerID, nil, [createDemoImage(text: "üå∏", color: .systemPink)].compactMap { $0 }, now.addingTimeInterval(-220)),
            (myID, "„Åç„Çå„ÅÑÔºÅ", [], now.addingTimeInterval(-200)),
            (partnerID, "„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇÇ„Åß„Åç„Çã„Çà", [], now.addingTimeInterval(-180)),
            (myID, "üëç", [], now.addingTimeInterval(-160)),
            (partnerID, "Èï∑Êäº„Åó„ÅßÁ∑®ÈõÜ„ÇÇ„Åß„Åç„Åæ„Åô", [], now.addingTimeInterval(-140)),
            (myID, "‰æøÂà©„Å†„Å≠", [], now.addingTimeInterval(-120)),
            (partnerID, "„Éì„Éá„Ç™ÈÄöË©±„ÇÑ„Ç´„É¨„É≥„ÉÄ„ÉºÂÖ±Êúâ„ÇÇ", [], now.addingTimeInterval(-100)),
            (myID, "Ê•Ω„Åó„ÅøÔºÅ", [], now.addingTimeInterval(-80)),
            (partnerID, "2‰∫∫„Å†„Åë„ÅÆÊÄù„ÅÑÂá∫„Çí‰Ωú„Çç„ÅÜüíï", [], now.addingTimeInterval(-60)),
        ]

        // Êó¢„Å´„Ç∑„Éº„ÉâÊ∏à„Åø„Å™„Çâ„Çπ„Ç≠„ÉÉ„Éó
        guard !UserDefaults.standard.bool(forKey: "didSeedTutorial") else { return }

        // ÁîüÊàêÊôÇÂàª„ÇíÂ∞ë„Åó„Åö„Å§ÈÅÖ„Çâ„Åõ„Å¶È†ÜÂ∫è„ÇíÂàÜ„Åã„Çä„ÇÑ„Åô„Åè„Åô„Çã
        var base = Date().addingTimeInterval(-7 * 60) // 7ÂàÜÂâç„ÇíËµ∑ÁÇπ
        func nextTimestamp() -> Date {
            defer { base.addTimeInterval(60) } // 1 ÂàÜ„Åö„Å§ÈÄ≤„ÇÅ„Çã
            return base
        }

        for (senderID, body, imageLocalURLs, createdAt) in messages {
            let message = Message(roomID: roomID,
                                  senderID: senderID,
                                  body: body,
                                  imageLocalURLs: imageLocalURLs,
                                  createdAt: createdAt,
                                  isSent: true)
            // Add sample reactions to some messages
            if body == "„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇÇ„Åß„Åç„Çã„Çà" {
                message.reactionEmoji = "‚ù§Ô∏è"
            } else if body == "üëç" {
                message.reactionEmoji = "üéâ"
            }
            context.insert(message)
        }
        try? context.save()

        UserDefaults.standard.set(true, forKey: "didSeedTutorial")
    }

    /// „É©„É≥„ÉÄ„É†„Ç´„É©„Éº or ÊåáÂÆö„Ç´„É©„Éº„ÅÆ„Ç∑„É≥„Éó„É´„Å™„Éá„É¢ÁîªÂÉè„ÇíÁîüÊàê„Åó„ÄÅ„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´‰øùÂ≠ò„ÄÇ
    /// ÁîüÊàê„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ `nil` „ÇíËøî„Åô„ÄÇ
    @discardableResult
    private static func createDemoImage(text: String, color: UIColor) -> URL? {
        let size = CGSize(width: 240, height: 240)
        let renderer = UIGraphicsImageRenderer(size: size)
        let image = renderer.image { ctx in
            // ËÉåÊôØ
            color.setFill()
            ctx.fill(CGRect(origin: .zero, size: size))
            // „ÉÜ„Ç≠„Çπ„ÉàÊèèÁîª
            let paragraph = NSMutableParagraphStyle()
            paragraph.alignment = .center
            let attrs: [NSAttributedString.Key: Any] = [
                .font: UIFont.boldSystemFont(ofSize: 120),
                .foregroundColor: UIColor.white,
                .paragraphStyle: paragraph
            ]
            let attrStr = NSAttributedString(string: text, attributes: attrs)
            let textRect = CGRect(x: 0,
                                   y: (size.height - 120) / 2,
                                   width: size.width,
                                   height: 120)
            attrStr.draw(in: textRect)
        }
        guard let data = image.pngData() else { return nil }
        let url = ImageCacheManager.cacheDirectory
            .appendingPathComponent(UUID().uuidString)
            .appendingPathExtension("png")
        do {
            try data.write(to: url)
            return url
        } catch {
            return nil
        }
    }
} 